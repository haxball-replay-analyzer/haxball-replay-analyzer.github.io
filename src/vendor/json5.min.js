var JSON5 = 'object' === typeof exports ? exports : {
};
JSON5.parse = function () {
  var h,
  l,
  g,
  a,
  q = {
    '\'': '\'',
    '"': '"',
    '\\': '\\',
    '/': '/',
    '\n': '',
    b: '',
    f: '\f',
    n: '\n',
    r: '\r',
    t: '\t'
  },
  v = ' \t\r\n\v\f ï»¿'.split(''),
  k,
  m = function (a) {
    return '' === a ? 'EOF' : '\'' + a + '\''
  },
  d = function (a) {
    var b = new SyntaxError;
    b.message = a + ' at line ' + l + ' column ' + g + ' of the JSON5 data. Still to read: ' + JSON.stringify(k.substring(h - 1, h + 19));
    b.at = h;
    b.lineNumber = l;
    b.columnNumber = g;
    throw b;
  },
  b = function (b) {
    b && b !== a && d('Expected ' + m(b) + ' instead of ' + m(a));
    a = k.charAt(h);
    h++;
    g++;
    if ('\n' === a || '\r' === a && '\n' !== k.charAt(h)) l++,
    g = 0;
    return a
  },
  r = function () {
    var e = '';
    var c = '';
    var f = 10;
    if ('-' === a || '+' === a) e = a,
    b(a);
    if ('I' === a) return c = n(),
    ('number' !== typeof c || isNaN(c)) && d('Unexpected word for number'),
    '-' === e ? - c : c;
    if ('N' === a) return c = n(),
    isNaN(c) || d('expected word to be NaN'),
    c;
    '0' === a && (c += a, b(), 'x' === a || 'X' === a ? (c += a, b(), f = 16)  : '0' <= a && '9' >= a && d('Octal literal'));
    switch (f) {
      case 10:
        for (; '0' <= a && '9' >= a; ) c += a,
        b();
        if ('.' === a) for (c += '.'; b() && '0' <= a && '9' >= a; ) c += a;
        if ('e' === a || 'E' === a) {
          c += a;
          b();
          if ('-' ===
          a || '+' === a) c += a,
          b();
          for (; '0' <= a && '9' >= a; ) c += a,
          b()
        }
        break;
      case 16:
        for (; '0' <= a && '9' >= a || 'A' <= a && 'F' >= a || 'a' <= a && 'f' >= a; ) c += a,
        b()
    }
    c = '-' === e ? - c : + c;
    if (isFinite(c)) return c;
    d('Bad number')
  },
  u = function () {
    var e,
    c = '',
    f,
    g;
    if ('"' === a || '\'' === a) for (f = a; b(); ) {
      if (a === f) return b(),
      c;
      if ('\\' === a) if (b(), 'u' === a) {
        for (e = g = 0; 4 > e; e += 1) {
          var t = parseInt(b(), 16);
          if (!isFinite(t)) break;
          g = 16 * g + t
        }
        c += String.fromCharCode(g)
      } else if ('\r' === a) '\n' === k.charAt(h) && b();
       else if ('string' === typeof q[a]) c += q[a];
       else break;
       else if ('\n' ===
      a) break;
       else c += a
    }
    d('Bad string')
  },
  f = function () {
    for (; a; ) if ('/' === a) if ('/' !== a && d('Not a comment'), b('/'), '/' === a) {
      '/' !== a && d('Not an inline comment');
      do if (b(), '\n' === a || '\r' === a) {
        b();
        break
      } while (a)
    } else if ('*' === a) a: {
      '*' !== a && d('Not a block comment');
      do for (b(); '*' === a; ) if (b('*'), '/' === a) {
        b('/');
        break a
      } while (a);
      d('Unterminated block comment')
    } else d('Unrecognized comment');
     else if (0 <= v.indexOf(a)) b();
     else break
  },
  n = function () {
    switch (a) {
      case 't':
        return b('t'),
        b('r'),
        b('u'),
        b('e'),
        !0;
      case 'f':
        return b('f'),
        b('a'),
        b('l'),
        b('s'),
        b('e'),
        !1;
      case 'n':
        return b('n'),
        b('u'),
        b('l'),
        b('l'),
        null;
      case 'I':
        return b('I'),
        b('n'),
        b('f'),
        b('i'),
        b('n'),
        b('i'),
        b('t'),
        b('y'),
        Infinity;
      case 'N':
        return b('N'),
        b('a'),
        b('N'),
        NaN
    }
    d('Unexpected ' + m(a))
  };
  var p = function () {
    f();
    switch (a) {
      case '{':
        a: {
          var e = {
          };
          if ('{' === a) for (b('{'), f(); a; ) {
            if ('}' === a) {
              b('}');
              break a
            }
            if ('"' === a || '\'' === a) var c = u();
             else for (c = a, '_' !== a && '$' !== a && ('a' > a || 'z' < a) && ('A' > a || 'Z' < a) && d('Bad identifier as unquoted key'); b() && ('_' === a || '$' === a || 'a' <= a && 'z' >= a || 'A' <= a && 'Z' >= a || '0' <= a && '9' >= a); ) c += a;
            f();
            b(':');
            e[c] = p();
            f();
            if (',' !== a) {
              b('}');
              break a
            }
            b(',');
            f()
          }
          d('Bad object');
          e = void 0
        }
        return e;
      case '[':
        a: {
          e = [
          ];
          if ('[' === a) for (b('['), f(); a; ) {
            if (']' === a) {
              b(']');
              break a
            }
            ',' === a ? d('Missing array element')  : e.push(p());
            f();
            if (',' !== a) {
              b(']');
              break a
            }
            b(',');
            f()
          }
          d('Bad array');
          e = void 0
        }
        return e;
      case '"':
      case '\'':
        return u();
      case '-':
      case '+':
      case '.':
        return r();
      default:
        return '0' <= a && '9' >= a ? r()  : n()
    }
  };
  return function (b, c) {
    k = String(b);
    h = 0;
    g = l = 1;
    a = ' ';
    var e = p();
    f();
    a && d('Syntax error');
    return 'function' === typeof c ? function w(a, b) {
      var e,
      d = a[b];
      if (d && 'object' === typeof d) for (e in d) if (Object.prototype.hasOwnProperty.call(d, e)) {
        var f = w(d, e);
        void 0 !== f ? d[e] = f : delete d[e]
      }
      return c.call(a, b, d)
    }({
      '': e
    }, '')  : e
  }
}();
